@page "/"
@using BlazorApp1.Data
@using BlazorApp1.Services
@using System.Net.Http.Json
@inject IPokeAPIService APIService

<h3 style="margin-bottom: 20px;">Guess the Pokémon!</h3>

<div class="input-group mb-3">
    <form @onsubmit="Enter">
        <label for="userInput">Type the Pokémon's name:</label>
        <input id="userInput" @bind="@userInput" placeholder="Enter Pokémon name here" />
        <button type="submit">Submit</button>
    </form>
</div>

@if (!string.IsNullOrEmpty(feedbackMessage))
{
    <div class="alert" style="background-color: @feedbackColor; color: white; border-radius: 10px; margin-bottom: 20px;">
        @feedbackMessage
    </div>
}

@if (currentPokemon != null)
{
    <div class="card mb-3">
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th class="col-1">Id</th>
                        <th class="col-1">First Letter</th>
                        <th class="col-6">Name</th>
                        <th class="col-4">Types</th>
                    </tr>
                </thead>
                <tbody>
                    <PokemonTableRow pokemon="@currentPokemon" />
                </tbody>
            </table>
        </div>
    </div>
}

<h4>Guesses</h4>
<ul class="list-group mb-3">
    @foreach (Guess guess in guesses)
    {
        <li class="list-group-item" style="color: @(guess.IsCorrect ? "black" : "red")">
            @(char.ToUpper(guess.Pokemon.Name[0]) + guess.Pokemon.Name.Substring(1).ToLower())
            @if (!guess.IsCorrect)
            {
                <span style="font-style: italic;">(Your answer: @guess.UserGuess)</span>
            }
        </li>
    }
</ul>

<div class="row">
    <div class="col-md-6">
        <div class="card" style="background-color: #4CAF50; color: white; border-radius: 10px;">
            <div class="card-body">
                <strong>Current Streak:</strong> @currentStreak
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card" style="background-color: #2196F3; color: white; border-radius: 10px;">
            <div class="card-body">
                <strong>Best Streak:</strong> @bestStreak
            </div>
        </div>
    </div>
</div>

@code {
    private Pokemon currentPokemon;
    private string userInput = "";
    private string feedbackMessage = "";
    private string feedbackColor = "black";
    private List<Guess> guesses = new List<Guess>();
    private int currentStreak = 0;
    private int bestStreak = 0;
    private HttpClient httpClient = new HttpClient();
    private const string FilePath = "best_streak.txt";

    protected override async Task OnInitializedAsync()
    {
        await FetchBestStreakFromFile();
        await FetchRandomPokemon();
    }

    private async Task FetchBestStreak()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<int>("http://localhost:8000/pokemon/streak/best");
            bestStreak = response;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task FetchRandomPokemon()
    {
        int totalPokemon = await APIService.GetPokemonCount();
        var randomId = new Random().Next(1, totalPokemon + 1);

        currentPokemon = await APIService.GetPokemon(randomId);

        userInput = "";
        feedbackMessage = "";
        feedbackColor = "black";
    }

    private async Task FetchBestStreakFromFile()
    {
        try
        {
            if (File.Exists(FilePath))
            {
                string content = await File.ReadAllTextAsync(FilePath);
                if (int.TryParse(content, out int streak))
                {
                    bestStreak = streak;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task UpdateBestStreak()
    {
        try
        {
            await httpClient.PutAsJsonAsync("http://localhost:8000/pokemon/best-streak/", bestStreak);

            await File.WriteAllTextAsync(FilePath, bestStreak.ToString());
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task CheckAnswer()
    {
        string normalizedUserInput = userInput.Trim().Replace("-", "").ToLower();
        string normalizedPokemonName = currentPokemon.Name.Replace("-", "").ToLower();

        bool isCorrect = normalizedUserInput == normalizedPokemonName;

        if (isCorrect)
        {
            currentStreak++;
            if (currentStreak > bestStreak)
            {
                bestStreak = currentStreak;
                await UpdateBestStreak();
            }
        }
        else
        {
            currentStreak = 0;
        }

        guesses.Add(new Guess
            {
                Pokemon = currentPokemon,
                UserGuess = userInput,
                IsCorrect = isCorrect
            });

        await FetchRandomPokemon();
    }

    private async Task Enter()
    {
        await CheckAnswer();
    }
}

